{"version":3,"sources":["components/Header.js","components/AddTask.js","components/TaskCounter.js","components/Task.js","components/TaskList.js","components/BackgroundImage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Date","toDateString","React","Component","uuidv4","require","AddTask","state","text","addTask","task","id","completed","alert","props","newTask","setState","textChanged","event","target","value","type","style","margin","placeholder","this","onChange","onClick","TaskCounter","count","Task","deleteTask","deleteTaskFunc","taskId","markTaskCompleted","markTaskCompletedFunc","class","TaskList","tasks","map","index","key","BackgroundImagePage","axios","App","addTaskToList","post","then","response","push","filteredTasks","filter","get","data","console","log","catch","error","BackgroundImage","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11926986.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n\n  render() {\n    return (\n      <div className=\"col\">\n        <div className=\"row pb-3 mb-3\">\n          <div className=\"col -8 text-align:center\">\n            <p>{new Date().toDateString()}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\n\nconst uuidv4 = require('uuid/v4');\n\nclass AddTask extends React.Component {\n\n    state = {\n        text: \"\"\n    }\n\n    addTask = () => {\n        const task = {\n            id: uuidv4(),\n            text: this.state.text,\n            completed: false\n        }\n        if (this.state.text === \"\") {\n          alert(\"Enter a task\");\n         }\n        //utilise the function we passed down to this component\n        this.props.newTask(task);\n\n        //clear out text for UX\n        this.setState({ text: \"\" });\n    }\n\n    textChanged = (event) => {\n        let text = this.state.text;\n\n        text = event.target.value;\n\n        this.setState({ text });\n    }\n\n\n\n    //alert(\"Added in App\").JSON.stringify(task);\n\n\n\n\n\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <input className=\"form control\" type=\"text\" id=\"outlined-full-width\" style={{ margin: 8 }} placeholder=\"Enter your notes here...\"\n                        value={this.state.text}\n                        onChange={this.textChanged} />\n                </div>\n                <div className=\"col-md-2\">\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.addTask}>Add</button>\n                </div>\n            </div>\n\n        );\n    }\n}\n\n\nexport default AddTask;","import React from \"react\";\n\nclass TaskCounter extends React.Component {\n    render() {\n        return (\n            <div className=\"row d-none d-md-block\">\n                <div className=\"col\">\n                    You have {this.props.count} tasks outstanding\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default TaskCounter;","import React from 'react';\n\nclass Task extends React.Component {\n\n    deleteTask = () => {\n        this.props.deleteTaskFunc(this.props.task.taskId);\n    }\n    markTaskCompleted = () => {\n        this.props.markTaskCompletedFunc(this.props.task.taskId);\n    }\n    render() {\n\n        const markTaskCompleted = this.props.task.completed;\n               \n\n        return (\n            <div className=\"row taskRow\">\n                {markTaskCompleted ? (\n                    <div className=\"col-12 col-md-6 completedTask\">\n                        {this.props.task.text}\n                    </div>\n                ) : (\n                       \n                    <div className=\"col-12 col-md-6\">\n                    {this.props.task.text}\n                </div>\n                )}\n                <div className=\"col-6 col-md-3\">\n                    <button type=\"button\" class=\"btn btn-danger btn-sm\" onClick={this.markTaskCompleted}>\n                        Done\n                    </button>\n                </div>\n\n                <div className=\"col-6 col-md-3\">\n                    <button type=\"button\" class=\"btn btn-danger btn-sm\" onClick={this.deleteTask}>\n                        Delete\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Task;","import React from \"react\";\nimport Task from \"./Task\";\n\n\nclass TaskList extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.tasks.map((task, index) => {\n                    return <Task deleteTaskFunc={this.props.deleteTaskFunc} markTaskCompletedFunc={this.props.markTaskCompletedFunc} task={task} key={index} />;\n                })\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default TaskList;","import React from \"react\";\n\n\nconst BackgroundImagePage = () => {\n    return (\n        <div className=\"bg\"></div>\n    );\n  }\n\n  export default BackgroundImagePage;","import React from 'react';\nimport \"./App.css\";\nimport Header from './components/Header';\nimport AddTask from './components/AddTask';\nimport TaskCounter from './components/TaskCounter';\nimport TaskList from './components/TaskList';\nimport BackgroundImage from './components/BackgroundImage';\nconst uuidv4 = require('uuid/v4');\nconst axios = require('axios');\n\nclass App extends React.Component {\n\n  state = {\n    tasks: [\n\n\n      // { id: uuidv4(), taskDescription: \"Order six bottles of gin\", completed: false },\n      // { id: uuidv4(), taskDescription: \"Call Ryan Reynolds back\", completed: false },\n      // { id: uuidv4(), taskDescription: \"Post letter to solicitor\", completed: true },\n      // { id: uuidv4(), taskDescription: \"Buy flowers for mum\", completed: true },\n      // { id: uuidv4(), taskDescription: \"Book haircut in time for birthday\", completed: true },\n    ]\n  }\n\n  componentDidMount() {\n    axios.get('https://p5pa4ryptk.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n      .then((response) => {\n        // handle success\n        this.setState({tasks: response.data.tasks});\n        console.log(response);\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  }\n\n  addTaskToList = (task) => {\n\n    axios.post('https://p5pa4ryptk.execute-api.eu-west-2.amazonaws.com/dev/tasks', task)\n    .then((response) => {\n      let tasks = this.state.tasks;\n      task.taskId = response.taskId;\n      tasks.push(task);\n      this.setState({tasks: tasks});\n    });\n  }\n\n  deleteTask = (taskId) => {\n    alert(`Are you sure you want to delete this task? ${taskId}`);\n    //This will be an array of tasks that are in state\n    let tasks = this.state.tasks;\n\n    let filteredTasks = tasks.filter(function (task) {\n      return task.taskId !== taskId;\n    });\n\n    this.setState({ tasks: filteredTasks });\n  }\n\n\n\n  markTaskCompleted = (taskId) => {\n    alert(`App will mark task as completed ${taskId}`);\n    \n    const markTaskCompleted = this.state.tasks.map(task => {\n      if (task.taskId === taskId) {\n        \n        task.completed = true;\n        \n      }\n      return task;\n    });\n    \n    this.setState({ tasks: markTaskCompleted });\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\" >\n\n        <BackgroundImage />\n        <Header />\n        <br></br>\n        <AddTask newTask={this.addTaskToList} />\n        <br></br>\n        <TaskCounter count={this.state.tasks.length} />\n        <br></br>\n        <TaskList tasks={this.state.tasks} deleteTaskFunc={this.deleteTask} markTaskCompletedFunc={this.markTaskCompleted} />\n      </div>\n\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}